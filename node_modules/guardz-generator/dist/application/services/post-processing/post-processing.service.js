"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostProcessingService = void 0;
class PostProcessingService {
    fileSystem;
    prettier;
    processExecutor;
    logger;
    eslint;
    constructor(fileSystem, prettier, processExecutor, logger, eslint) {
        this.fileSystem = fileSystem;
        this.prettier = prettier;
        this.processExecutor = processExecutor;
        this.logger = logger;
        this.eslint = eslint;
    }
    async processFiles(files) {
        for (const file of files) {
            try {
                this.logger.log(`Processing file: ${file.fileName}`);
                // Step 1: Format the file content using prettier
                const formattedContent = await this.prettier.format(file.content, {
                    parser: 'typescript',
                });
                // Step 2: Write the formatted content back to the file
                await this.fileSystem.writeFile(file.fileName, formattedContent);
                this.logger.log(`✓ Prettier formatting applied to: ${file.fileName}`);
            }
            catch (error) {
                this.logger.error(`Error processing file ${file.fileName}:`, error);
                throw error;
            }
        }
        // Step 3: Run ESLint --fix on all files to handle import sorting, grouping, and fixing
        if (files.length > 0) {
            try {
                const filePaths = files.map(file => file.fileName);
                await this.eslint.fixFiles(filePaths);
                this.logger.log(`✓ ESLint import fixes applied to ${files.length} files`);
            }
            catch (error) {
                this.logger.warn('ESLint import fixing failed:', error);
                // Don't throw - import fixing errors shouldn't fail the entire process
            }
        }
    }
    /**
     * Process files with enhanced import fixing
     * This method provides more detailed control over the import fixing process
     */
    async processFilesWithImportFixes(files) {
        if (files.length === 0) {
            return;
        }
        this.logger.log(`Starting enhanced post-processing for ${files.length} files`);
        try {
            // Step 1: Format with Prettier
            await this.processFiles(files);
            // Step 2: Run ESLint with specific import rules
            const filePaths = files.map(file => file.fileName);
            // Run ESLint --fix to handle:
            // - Import sorting (alphabetical order)
            // - Import grouping (builtin, external, internal, etc.)
            // - Adding missing "type" imports
            // - Removing duplicate imports
            // - Shortening import paths where possible
            await this.eslint.fixFiles(filePaths);
            this.logger.log(`✓ Enhanced import fixing completed for ${files.length} files`);
        }
        catch (error) {
            this.logger.error('Enhanced post-processing failed:', error);
            throw error;
        }
    }
}
exports.PostProcessingService = PostProcessingService;
//# sourceMappingURL=post-processing.service.js.map